

enum Offsets
{
	IsInWorld = 0x3000CF6B,
	Player_Name = 0x3000ABE4,
	Whitelist = 0x3000AD34,
	LockControl = 0x0155847C,


	//Split//
	Split_Screen = 0x00AEF9F0, //1.84
	Split_DrawText = 0x30FB2331, //1.84
	Split_Color_Text = 0x31E72950, //1.84
	SplitController = 0x31E7239C, //1.84
	Split_Shader_Shadow = 0x31E7281C, //Used for title
	Split_HUD = 0x31E71F1C, //Used for Hud
	Split_Text_Position = 0x31E7290C, //Used for text
	Split_BG_Colors = 0x31E71F60, //Used for color Hud
	Split_Shader_White = 0x31E7272C, //1.84
	Split_Fix_Text = 0x00887E3B,
	Split_Hud_Bar = 0x31E7517C,
	//


	//Scroll Bar//
	ScrollBar_Shader = 0x31E74F0C,
	Scrollbar_Colors = 0x31E74F50,
	Scrollbar_Toggle = 0x31E74F20,
	//

};



#pragma region "NAME CHANGER"

void NAME_CHANGER() //<== VOID NAME CHANGER
{
	char Name[16];

	Keyboard::oskdialog_mode = Keyboard::MODE_OPEN;
	while (Keyboard::oskdialog_mode != Keyboard::MODE_EXIT)
	{
		Keyboard::keyboard(Name, L"", L"DownCraft SPRX Demo V2.2 ~ Name Changer | Enter your new name here:");
	}

	strcpy((char*)Player_Name, Name); //<== Name Offset
	return;
}

#pragma endregion


#pragma region "Functions for the Menu"

//HUD FUNCS
void DrawHud(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E71F1C, width);
	PS3Lib::WriteSingleFloat(0x31E71F28, height);
	PS3Lib::WriteSingleFloat(0x31E71F2C, x);
	PS3Lib::WriteSingleFloat(0x31E71F30, y);
}

void DrawHudColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E71F60, R);
	PS3Lib::WriteSingleFloat(0x31E71F64, G);
	PS3Lib::WriteSingleFloat(0x31E71F68, B);
	PS3Lib::WriteSingleFloat(0x31E71F6C, A);
}



//TEXT FUNCS
void DrawText(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E7290C, width);
	PS3Lib::WriteSingleFloat(0x31E72918, height);
	PS3Lib::WriteSingleFloat(0x31E7291C, x);
	PS3Lib::WriteSingleFloat(0x31E72920, y);
}

void DrawTextColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E72950, R);
	PS3Lib::WriteSingleFloat(0x31E72954, G);
	PS3Lib::WriteSingleFloat(0x31E72958, B);
	PS3Lib::WriteSingleFloat(0x31E7295C, A);
}




//SCROLL FUNCS
void DrawScrollbar(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E74F0C, width);
	PS3Lib::WriteSingleFloat(0x31E74F18, height);
	PS3Lib::WriteSingleFloat(0x31E74F1C, x);
	PS3Lib::WriteSingleFloat(0x31E74F20, y);
}

void NewDrawScrollBar(float width, float height, float x)
{
	PS3Lib::WriteSingleFloat(0x31E74F0C, width);
	PS3Lib::WriteSingleFloat(0x31E74F18, height);
	PS3Lib::WriteSingleFloat(0x31E74F1C, x);
}


void DrawScrollbarColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E74F50, R);
	PS3Lib::WriteSingleFloat(0x31E74F54, G);
	PS3Lib::WriteSingleFloat(0x31E74F58, B);
	PS3Lib::WriteSingleFloat(0x31E74F5C, A);
}




//Title Hud
void DrawTitle(float width, float height, float x, float y)
{
	PS3Lib::WriteSingleFloat(0x31E7281C, width);
	PS3Lib::WriteSingleFloat(0x31E72828, height);
	PS3Lib::WriteSingleFloat(0x31E7282C, x);
	PS3Lib::WriteSingleFloat(0x31E72830, y);
}

void DrawTitleColor(float R, float G, float B, float A)
{
	PS3Lib::WriteSingleFloat(0x31E72860, R);
	PS3Lib::WriteSingleFloat(0x31E72864, G);
	PS3Lib::WriteSingleFloat(0x31E72868, B);
	PS3Lib::WriteSingleFloat(0x31E7286C, A);
}

#pragma endregion


bool InWorld()
{
	return !(*(char*)IsInWorld != 0);
}


#pragma region "BEFORE START SPRXs"

void BEFORE_START_SPRX()
{
	sleep(30000); //<== WAIT 30 seconds for load Minecraft

	strcpy((char*)0x320E8410, "Alone - DownCraft SPRX Demo V2.2");
	strcpy((char*)0x320E89E0, "Multiplayer - DownCraft SPRX Demo V2.2");
	//Show actualy game states = 0x017003D8

	//for fix text
	char FIX[] = { 0x00 };
	write_process(0x00887E3B, &FIX, sizeof(FIX));

	DrawScrollbarColor(1, 4.29497e+09, 4.29497e+09, 1.18744e-07);
	DrawHudColor(6.70532e-30, 1.26218e-29, 1.26218e-29, 1.74219);
	DrawTextColor(1, 1, 1, 4.29497e+09);
	DrawTitleColor(1, 4.29497e+09, 4.29497e+09, 1.18744e-07);

	//using for move shader we don't need
	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));
}

#pragma endregion


#pragma region MOD ENABLED AND DISABLED

void MOD_ENABLED() //<== CHANGE HUD TO GREEN FOR A OPTION ENABLED
{
	char OPTENABLED[] = { 0x3F, 0x80, 0x00, 0x00, 0x4F, 0x80 };
	write_process(0x3000AAF8, &OPTENABLED, sizeof(OPTENABLED));
	sleep(300);
	char OPTENABLED1[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
	write_process(0x3000AAF8, &OPTENABLED1, sizeof(OPTENABLED1));
}


void MOD_DISABLED() // <== CHANGE HUD TO RED FOR A OPTION DISABLED
{
	char OPTDISABLED[] = { 0x4F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
	write_process(0x3000AAF8, &OPTDISABLED, sizeof(OPTDISABLED));
	sleep(300);
	char OPTENABLED1[] = { 0x3F, 0x80, 0x00, 0x00, 0x3F, 0x80 };
	write_process(0x3000AAF8, &OPTENABLED1, sizeof(OPTENABLED1));
}

#pragma endregion


#pragma region "RGB FUNCTIONS"

float colorR = 255, colorG = 0, colorB = 0;
void DoColors() {
	if (colorR > 0 && colorB == 0)
	{
		colorR -= 1;
		colorG += 1;
	}
	if (colorG > 0 && colorR == 0)
	{
		colorG -= 1;
		colorB += 1;
	}
	if (colorB > 0 && colorG == 0)
	{
		colorR += 1;
		colorB -= 1;
	}
}

uint32_t colorDo;

void RGB_Background_THEMES()
{
	colorDo += 1;
	if (colorDo == 60)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x31E71F60) = colorR / 255.0f;
	*(float*)(0x31E71F64) = colorG / 255.0f;
	*(float*)(0x31E71F68) = colorB / 255.0f;
}

void RGB_Scroll_THEMES()
{
	colorDo += 1;
	if (colorDo == 60)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x31E74F50) = colorR / 255.0f;
	*(float*)(0x31E74F54) = colorG / 255.0f;
	*(float*)(0x31E74F58) = colorB / 255.0f;
}

void RGB_Text_THEMES()
{
	colorDo += 1;
	if (colorDo == 60)
	{
		DoColors();
		colorDo = 0;
	}

	*(float*)(0x31E72950) = colorR / 255.0f;
	*(float*)(0x31E72954) = colorG / 255.0f;
	*(float*)(0x31E72958) = colorB / 255.0f;
}



#pragma endregion


#pragma region BAR_INSTRUCTIONS_1

void BAR_INSTRUCTION_1()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x31, 0x00, 0x20, 0x00, 0x2B, 0x00, 0x20, 0x00, 0x55, 0x00, 0x50, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x42, 0x56, 0x00, 0x00, 0xC3, 0x90 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char SCROLLBARSELECT[] = { 0x46, 0xAA };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	DrawHud(-3.75, 0.625, 752, 328);
	DrawText(1, 1, 208, 310);


}

#pragma endregion


#pragma region BAR_INSTRUCTIONS_2

void BAR_INSTRUCTION_2()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char TEXTS[] = { 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x31, 0x00, 0x20, 0x00, 0x2B, 0x00, 0x20, 0x00, 0x55, 0x00, 0x50, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitHUD[] = { 0xC0, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x42, 0x56, 0x00, 0x00, 0xC3, 0x90 };
	write_process(Split_HUD, &SplitHUD, sizeof(SplitHUD));

	char SCROLLBARSELECT[] = { 0x46, 0xAA };
	write_process(Scrollbar_Toggle, &SCROLLBARSELECT, sizeof(SCROLLBARSELECT));

	DrawHud(-4.5, -3.75, 768, 328);
	DrawText(1, 1, 208, 310);

}

#pragma endregion




#pragma region NO HOST MENU


#pragma region Open No Host Menu

void OpenNoHostPage()
{
	DrawScrollbar(0.559326, 0.40625, 128, 202);

	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}


	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x75, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x65, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4A, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x53, 0x00, 0x70, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x48, 0x00, 0x69, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x50, 0x00, 0x76, 0x00, 0x50, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x0D, 0x00, 0x49, 0x00, 0x44, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x7A, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x75, 0x00, 0x6E, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x43, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x75, 0x00, 0x63, 0x00, 0x68, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x70, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x61, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x20, 0x00, 0x47, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x56, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x43, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x42, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x68, 0x00, 0x0A, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x55, 0x00, 0x50, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x77, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x54, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x73, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x64, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x44, 0x00, 0x72, 0x00, 0x61, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x45, 0x00, 0x67, 0x00, 0x67, 0x00, 0x73, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	//New funcs for draw hud
	DrawTitle(4.03125, 0.960935, -260, -186);
	DrawHud(-4.5, -9, -13, 414);
	DrawText(1, 1, -212, -8);
	DrawScrollbar(0.559326, 0.40625, 130, 348);

	NoHostPage = true;

	ScrollNoHostPage = 0;

	DrawScrollbar(0.559326, 0.40625, 128, 202);
}

#pragma endregion


#pragma region Close No Host Menu

void CloseNoHostPage()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));


	NoHostPage = false;

	ScrollNoHostPage = 0;
}

#pragma endregion


#pragma region Select Non Host Options

void SelectNoHostPageOption()
{
	if (ScrollNoHostPage == 0)
	{
		if (!SuperSpeed)
		{
			char SPEED[] = { 0xFF, 0xFF, 0xFF };
			write_process(0x003ABD49, &SPEED, sizeof(SPEED));
			MOD_ENABLED();
			sleep(200);
			SuperSpeed = true;
		}
		else
		{
			char SPEED[] = { 0x26, 0xAD, 0x89 };
			write_process(0x003ABD49, &SPEED, sizeof(SPEED));
			MOD_DISABLED();
			sleep(200);
			SuperSpeed = false;
		}
	}

	if (ScrollNoHostPage == 1)
	{
		if (!MultiJump)
		{
			char MOD[] = { 0x14 };
			write_process(0x0022790B, &MOD, sizeof(MOD));
			MOD_ENABLED();
			sleep(200);
			MultiJump = true;
		}
		else
		{
			char MOD[] = { 0x18 };
			write_process(0x0022790B, &MOD, sizeof(MOD));
			MOD_DISABLED();
			sleep(200);
			MultiJump = false;
		}
	}

	if (ScrollNoHostPage == 2)
	{
		
	}

	if (ScrollNoHostPage == 3)
	{
		
	}

	if (ScrollNoHostPage == 4)
	{

	}

	if (ScrollNoHostPage == 5)
	{
		
	}

	if (ScrollNoHostPage == 6)
	{
		
	}

	if (ScrollNoHostPage == 7)
	{
		
	}

	if (ScrollNoHostPage == 8)
	{
		
	}

	if (ScrollNoHostPage == 9)
	{
		
	}

	if (ScrollNoHostPage == 10)
	{
		
	}

	if (ScrollNoHostPage == 11)
	{
		
	}

	if (ScrollNoHostPage == 12)
	{
		
	}

	if (ScrollNoHostPage == 13)
	{
		
	}

	if (ScrollNoHostPage == 14)
	{
		
	}

	if (ScrollNoHostPage == 15)
	{
		
	}

	if (ScrollNoHostPage == 16)
	{
		
	}

	if (ScrollNoHostPage == 17)
	{
		
	}

	if (ScrollNoHostPage == 18)
	{
		
	}

	if (ScrollNoHostPage == 19)
	{
		
	}
}

#pragma endregion


#pragma endregion


#pragma region HOST MENU


#pragma region Open Host Menu

void OpenHostPage()
{
	DrawScrollbar(0.559326, 0.40625, 130, 202);

	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}


	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x74, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x4B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x69, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x6E, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x62, 0x00, 0x61, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x55, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x64, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x20, 0x00, 0x55, 0x00, 0x70, 0x00, 0x0A, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x63, 0x00, 0x65, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x58, 0x00, 0x50, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x76, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x0A, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x44, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x67, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x72, 0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x0A, 0x00, 0x53, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x47, 0x00, 0x72, 0x00, 0x61, 0x00, 0x76, 0x00, 0x69, 0x00, 0x74, 0x00, 0x79, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x78, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x65, 0x00, 0x70, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x42, 0x00, 0x75, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x63, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x4B, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x50, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x79, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x44, 0x00, 0x72, 0x00, 0x69, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x42, 0x00, 0x6F, 0x00, 0x61, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x47, 0x00, 0x65, 0x00, 0x74, 0x00, 0x20, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x45, 0x00, 0x6E, 0x00, 0x63, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x0A, 0x00, 0x4D, 0x00, 0x61, 0x00, 0x78, 0x00, 0x20, 0x00, 0x50, 0x00, 0x69, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x75, 0x00, 0x70, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x50, 0x00, 0x6F, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x20, 0x00, 0x46, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x0A, 0x00, 0x41, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x20, 0x00, 0x49, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x65, 0x00, 0x61, 0x00, 0x64, 0x00, 0x0A, 0x00, 0x45, 0x00, 0x78, 0x00, 0x74, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x54, 0x00, 0x4E, 0x00, 0x54, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	//New funcs for draw hud
	DrawTitle(4.03125, 0.960935, -260, -186);
	DrawHud(-4.5, -9, -13, 414);
	DrawText(1, 1, -212, -8);

	HostPage = true;

	ScrollHostPage = 0;

	DrawScrollbar(0.559326, 0.40625, 130, 202);
}

#pragma endregion


#pragma region Close Host Menu

void CloseHostPage()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));


	HostPage = false;

	ScrollHostPage = 0;
}

#pragma endregion


#pragma region Select Self Options

void SelectHostPageOption()
{
	if (ScrollHostPage == 0)
	{
		if (!GodMode)
		{
			char MODS[] = { 0x80 };
			write_process(0x004B2021, &MODS, sizeof(MODS));
			MOD_ENABLED();
			sleep(200);
			GodMode = true;
		}
		else
		{
			char MODS[] = { 0x20 };
			write_process(0x004B2021, &MODS, sizeof(MODS));
			MOD_DISABLED();
			sleep(200);
			GodMode = false;
		}
	}

	if (ScrollHostPage == 1)
	{
		
	}

	if (ScrollHostPage == 2)
	{
		
	}

	if (ScrollHostPage == 3)
	{
		
	}

	if (ScrollHostPage == 4)
	{
		
	}

	if (ScrollHostPage == 5)
	{
		
	}

	if (ScrollHostPage == 6)
	{

	}

	if (ScrollHostPage == 7)
	{
		
	}

	if (ScrollHostPage == 8)
	{
		
	}

	if (ScrollHostPage == 9)
	{
		
	}

	if (ScrollHostPage == 10)
	{
		
	}

	if (ScrollHostPage == 11)
	{
		
	}

	if (ScrollHostPage == 12)
	{
		
	}

	if (ScrollHostPage == 13)
	{

	}

	if (ScrollHostPage == 14)
	{

	}

	if (ScrollHostPage == 15)
	{
		
	}

	if (ScrollHostPage == 16)
	{
		
	}

	if (ScrollHostPage == 17)
	{
		
	}

	if (ScrollHostPage == 18)
	{
		
	}

	if (ScrollHostPage == 19)
	{
		
	}
}

#pragma endregion


#pragma endregion


#pragma region MAIN MENU


#pragma region Open Menu

void OpenMenu()
{
	DrawScrollbar(0.558594, 0.40625, 133.438, 205);

	if (LockOptions == 0)
	{
		char LOCK[] = { 0x01 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}
	else
	{
		char LOCK[] = { 0x00 };
		write_process(LockControl, &LOCK, sizeof(LOCK));
	}


	//Draw Text
	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x0A, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x6F, 0x00, 0x20, 0x00, 0x48, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x56, 0x00, 0x69, 0x00, 0x73, 0x00, 0x75, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x65, 0x00, 0x72, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x53, 0x00, 0x65, 0x00, 0x74, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x3E, 0x00, 0x3E, 0x00, 0x20, 0x00, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x64, 0x00, 0x69, 0x00, 0x74, 0x00, 0x73, 0x00, 0x0A, 0x00, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	//New funcs for draw hud
	DrawTitle(4.03125, 0.960935, -260, -186);
	DrawHud(-4.5, -3.75, -13, 20);
	DrawText(1, 1, -212, -169);

	MainMenu = true;

	ScrollBarMenu = 0;

	DrawScrollbar(0.558594, 0.40625, 133.438, 205);
}

#pragma endregion


#pragma region Close Menu

void CloseMenu()
{
	char LOCK[] = { 0x00 };
	write_process(LockControl, &LOCK, sizeof(LOCK));


	char TEXTS[] = { 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));


	MainMenu = false;

	ScrollBarMenu = 0;

	//SETTINGS BAR INSTRUCTIONS = DEFAULT 0//

	if (SettingsInstructions == 0)
	{
		BAR_INSTRUCTION_1(); //FIRST BAR INSTRUCTION
	}

	if (SettingsInstructions == 1)
	{
		BAR_INSTRUCTION_2(); //SECONDS BAR INSTRUCTION
	}

	if (SettingsInstructions == 2)
	{

	}
}

#pragma endregion


#pragma region Select Options

void SelectMenuOption()
{
	if (ScrollBarMenu == 0) //HOST MENU
	{
		CloseMenu();
		sleep(50);
		OpenHostPage();
	}

	if (ScrollBarMenu == 1) //NON HOST
	{
		CloseMenu();
		sleep(50);
		OpenNoHostPage();
	}

	if (ScrollBarMenu == 2) //VISION
	{
	
	}

	if (ScrollBarMenu == 3) //NAME
	{
		NAME_CHANGER();
		sleep(50);
	}

	if (ScrollBarMenu == 4) //Settings
	{
		
	}

	if (ScrollBarMenu == 5) //CREDITS
	{
		MOD_ENABLED();
		char MODE1[] = { 0x00, 0x00, 0x00, 0x00 };
		write_process(0x016C93F0, &MODE1, sizeof(MODE1));
		Dialog::msgdialog_mode = Dialog::MODE_RUNNING;
		Dialog::ProgressBar("DownCraft SPRX V2.2 By Misaki\nhttps://downcraft.xyz", "Credits", 5);
		return;
	}
}

#pragma endregion


#pragma endregion





#pragma region FIRST LOAD SPRX

void FIRST_LOAD_SPRX()
{
	char SHADER_WHITE[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_White, &SHADER_WHITE, sizeof(SHADER_WHITE));

	char SPLITCONTROLLER[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x41, 0x80, 0x00, 0x00, 0x46 };
	write_process(SplitController, &SPLITCONTROLLER, sizeof(SPLITCONTROLLER));

	char Split_Shadow[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46 };
	write_process(Split_Shader_Shadow, &Split_Shadow, sizeof(Split_Shadow));

	char SplitScren[] = { 0x40 };
	write_process(Split_Screen, &SplitScren, sizeof(SplitScren));

	char HUD_BAR_LOADING[] = { 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x44, 0x0B, 0x00, 0x00, 0x42, 0xA4, 0x00 };
	write_process(Split_HUD, &HUD_BAR_LOADING, sizeof(HUD_BAR_LOADING));

	char POSITION_TEXTS[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC1, 0xB0, 0x00, 0x00, 0x40, 0xDA };
	write_process(Split_Text_Position, &POSITION_TEXTS, sizeof(POSITION_TEXTS));

	char TEXTS[] = { 0x44, 0x00, 0x6F, 0x00, 0x77, 0x00, 0x6E, 0x00, 0x43, 0x00, 0x72, 0x00, 0x61, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x50, 0x00, 0x52, 0x00, 0x58, 0x00, 0x20, 0x00, 0x50, 0x00, 0x72, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x69, 0x00, 0x75, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x56, 0x00, 0x32, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS, sizeof(TEXTS));

	char LOCK[] = { 0x01 };
	write_process(LockControl, &LOCK, sizeof(LOCK));

	char COLORS_PROGRESS_BAR[] = { 0x4F };
	write_process(0x31E71F64, &COLORS_PROGRESS_BAR, sizeof(COLORS_PROGRESS_BAR));

	char PROGRESS_BAR_1[] = { 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_1, sizeof(PROGRESS_BAR_1));

	sleep(2000);

	char PROGRESS_BAR_2[] = { 0x3E, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_2, sizeof(PROGRESS_BAR_2));

	sleep(4000);

	char PROGRESS_BAR_3[] = { 0x3E, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_3, sizeof(PROGRESS_BAR_3));

	sleep(2000);

	char PROGRESS_BAR_4[] = { 0x3E, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_4, sizeof(PROGRESS_BAR_4));

	sleep(2000);

	char PROGRESS_BAR_5[] = { 0x3E, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_5, sizeof(PROGRESS_BAR_5));

	sleep(4000);

	char PROGRESS_BAR_6[] = { 0x3E, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_6, sizeof(PROGRESS_BAR_6));

	sleep(2000);

	char PROGRESS_BAR_7[] = { 0x3F, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_7, sizeof(PROGRESS_BAR_7));

	sleep(4000);

	char PROGRESS_BAR_8[] = { 0x3F, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_8, sizeof(PROGRESS_BAR_8));

	sleep(6000);

	char PROGRESS_BAR_9[] = { 0x3F, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_9, sizeof(PROGRESS_BAR_9));

	sleep(3000);

	char PROGRESS_BAR_10[] = { 0x3F, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_10, sizeof(PROGRESS_BAR_10));

	sleep(3000);

	char PROGRESS_BAR_11[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x11, 0x00, 0x00, 0x43, 0xBF, 0x00, 0x00, 0x43, 0xF2, 0x00 };
	write_process(ScrollBar_Shader, &PROGRESS_BAR_11, sizeof(PROGRESS_BAR_11));

	sleep(1000);

	char POSITION_TEXTS1[] = { 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0xC1, 0xB0, 0x00, 0x00, 0x40, 0xDA };
	write_process(Split_Text_Position, &POSITION_TEXTS1, sizeof(POSITION_TEXTS1));

	char TEXTS2[] = { 0x43, 0x00, 0x68, 0x00, 0x65, 0x00, 0x63, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x57, 0x00, 0x68, 0x00, 0x69, 0x00, 0x74, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x69, 0x00, 0x73, 0x00, 0x74, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x2E, 0x00, 0x00 };
	write_process(Split_DrawText, &TEXTS2, sizeof(TEXTS2));

	char HUD_BAR_LOADING1[] = { 0xC0, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x20, 0x00, 0x00, 0x43, 0xFC, 0x00, 0x00, 0x42, 0xA4, 0x00 };
	write_process(Split_HUD, &HUD_BAR_LOADING1, sizeof(HUD_BAR_LOADING1));


	//LOAD WHITELIST



	FirstLoadSPRX = FirstLoadSPRX + 1;

	sleep(5000);

	OpenMenu();

	char COLORS_PROGRESS_BAR1[] = { 0x0F };
	write_process(0x31E71F64, &COLORS_PROGRESS_BAR1, sizeof(COLORS_PROGRESS_BAR1));
}

#pragma endregion

#pragma region "LOOP FUNCTIONS"

void WALK_INVENTORY_ON()
{
	char MODS[] = { 0x00 };
	write_process(0x3000CF68, &MODS, sizeof(MODS));
}

void FAKE_LAGS_ON()
{
	char MODS[] = { 0x3F, 0x50 };
	write_process(0x00C202C8, &MODS, sizeof(MODS));

	char MODS1[] = { 0x3F, 0x51 };
	write_process(0x00C202C8, &MODS1, sizeof(MODS1));
}

void FAKE_LAGS_OFF()
{
	char MODS[] = { 0x3F, 0x50 };
	write_process(0x00C202C8, &MODS, sizeof(MODS));
}


#pragma endregion
